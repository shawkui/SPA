#include <QGraphicsView>
#include <QDebug>
#include <QScrollArea>

#include "mainwindow.h"
#include "ui_mainwindow.h"
#include "canva.h"
#include "shapetype.h"
#include "textinput.h"
#include "layercheckwindow.h"
#include <QDialog>
#include <QSpacerItem>
#include "funcwindow.h"


MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    /*
     * The above part is generated by QT
     * The following part is designed by Us.
     */
    /* initilaize the parameters and window */
    MyCanva=new Canva;
    QScrollArea* sArea=new QScrollArea;
    QPushButton *newBut=new QPushButton;
    newBut->setCheckable(true);
    newBut->setChecked(true);
    connect(MyCanva,SIGNAL(ShapeItemOn()),this,SLOT(trunToEditShape()));
    connect(MyCanva,SIGNAL(ImageItemOn()),this,SLOT(trunToEditImage()));
    ui->spinBox->setValue(5);
    sArea->setWidget(MyCanva);
    ui->Pen->setCheckable(true);
    ui->NormalButton->setCheckable(true);
    ui->NormalButton->setChecked(true);
    ui->SelectionButton->setCheckable(true);
    ui->lass->setCheckable(true);
    qDebug()<<11;
    ui->Wire->setCheckable(true);
    qDebug()<<22;
    ui->Canvas->setWidget(sArea);
    ui->tabWidget->setTabText(0,"Home Page");
    ui->tabWidget->setTabText(1,"Circuit Shapes");
    ui->tabWidget->setTabText(2,"Shape Tools");

    /*
     * ----------------------------------------------------------------------------------------------------
     * begin to add Menu actions
     */
    /* add layer control manus */
    layersAction=new QList<QAction*>;
    layerActive=new QList<QAction*>;

    connect(MyCanva,SIGNAL(createNewLayer()),this,SLOT(createLayer()));
    connect(MyCanva,SIGNAL(createNewLayer()),this,SLOT(createActlayer()));

    //file Menu
    QMenu *fileMenu=menuBar()->addMenu(tr("&File"));

    openAct=new QAction(tr("&Open"),this);
    fileMenu->addAction(openAct);
    connect(openAct,SIGNAL(triggered()),this,SLOT(openAction()));

    loadAct=new QAction(tr("&load"),this);
    fileMenu->addAction(loadAct);
    connect(loadAct,SIGNAL(triggered()),this,SLOT(loadAction()));

    saveAct=new QAction(tr("&Save"),this);
    fileMenu->addAction(saveAct);
    connect(saveAct,SIGNAL(triggered()),this,SLOT(saveAction()));

    saveAsAct=new QAction(tr("&Save as"),this);
    fileMenu->addAction(saveAsAct);
    connect(saveAsAct,SIGNAL(triggered()),this,SLOT(saveAsAction()));

    //Basic Operation Menu
    QMenu *operationMenu=menuBar()->addMenu(tr("Basic Operation"));

    rotationCloAct=new QAction(tr("&Rotate Clockwise"),this);
    operationMenu->addAction(rotationCloAct);
    connect(rotationCloAct,SIGNAL(triggered()),this,SLOT(rotationCloAction()));

    rotationCunCloAct=new QAction(tr("&Rotate Cunterclockwise"),this);
    operationMenu->addAction(rotationCunCloAct);
    connect(rotationCunCloAct,SIGNAL(triggered()),this,SLOT(rotationCunCloAction()));

    zoomInAct=new QAction(tr("&Zoom In"),this);
    operationMenu->addAction(zoomInAct);
    connect(zoomInAct,SIGNAL(triggered()),this,SLOT(zoomInAction()));

    zoomOutAct=new QAction(tr("&Zoom Out"),this);
    operationMenu->addAction(zoomOutAct);
    connect(zoomOutAct,SIGNAL(triggered()),this,SLOT(zoomOutAction()));

    screenshotAct=new QAction(tr("&Screen Shot"),this);
    operationMenu->addAction(screenshotAct);
    connect(screenshotAct, SIGNAL(triggered()), this, SLOT(showMainWindow2()));

    //filter menu

    QMenu *additionalTools=menuBar()->addMenu(tr("Additional Tools"));

    gridAct=new QAction(tr("Grid"),this);
    gridAct->setCheckable(true);
    additionalTools->addAction(gridAct);
    connect(gridAct,SIGNAL(triggered()),this,SLOT(gridAction()));

    saveWithGridActt=new QAction(tr("Save With Grid"),this);
    saveWithGridActt->setCheckable(true);
    additionalTools->addAction(saveWithGridActt);
    connect(saveWithGridActt,SIGNAL(triggered()),this,SLOT(saveWithGridAction()));

    layerMenu=menuBar()->addMenu(tr("Layer"));
    layerActiveMenu=menuBar()->addMenu(tr("Layer Active"));

    QMenu *functionMenu = menuBar()->addMenu(tr("Function"));
    QAction* func=new QAction(tr("func"),this);
    functionMenu->addAction(func);
    connect(func, SIGNAL(triggered()), this, SLOT(showFuncWindow()));
    //filter menu

    QMenu *Effect=menuBar()->addMenu(tr("&Filter"));

    grayfilterAct=new QAction(tr("&GrayFilter"));
    Effect->addAction(grayfilterAct);
    connect(grayfilterAct,SIGNAL(triggered()),this,SLOT(grayfilterAction()));

    negativefilterAct=new QAction(tr("&NegativeFilter"));
    Effect->addAction(negativefilterAct);
    connect(negativefilterAct,SIGNAL(triggered()),this,SLOT(negativefitlerAction()));

    QVBoxLayout* layerLayOut=new QVBoxLayout;
    ui->widget->setLayout(layerLayOut);

    //palette bar
    paletteBar = new PaletteBar(toolBar);
    addToolBar(Qt::RightToolBarArea, paletteBar);
    connect(paletteBar,SIGNAL(newColor()),this,SLOT(getMewColor()));

    /*
     * ------------------------------------------------------------------------------------------------------
     * end to add menu actions
     *
     */

    /*
     * ------------------------------------------------------------------------------------------------------
     * begin to add icons for buttons
     *
     */
    ui->pushButton->setIcon(QPixmap::fromImage(QImage(("../SPA_v1.3/icons/Open.png"))));
    ui->pushButton->setIconSize(QSize(40,30));

    ui->pushButton_2->setIcon(QPixmap::fromImage(QImage(("../SPA_v1.3/icons/save.png"))));
    ui->pushButton_2->setIconSize(QSize(20,20));

    ui->pushButton_3->setIcon(QPixmap::fromImage(QImage(("../SPA_v1.3/icons/saveAs.png"))));
    ui->pushButton_3->setIconSize(QSize(20,20));

    ui->pushButton_24->setIcon(QPixmap::fromImage(QImage(("../SPA_v1.3/icons/zoom-in.png"))));
    ui->pushButton_24->setIconSize(QSize(20,20));

    ui->ShapeZoomin->setIcon(QPixmap::fromImage(QImage(("../SPA_v1.3/icons/zoom-in.png"))));
    ui->ShapeZoomin->setIconSize(QSize(20,20));

    ui->ShapeZoomOut->setIcon(QPixmap::fromImage(QImage(("../SPA_v1.3/icons/zoom-out.png"))));
    ui->ShapeZoomOut->setIconSize(QSize(20,20));

    ui->pushButton_25->setIcon(QPixmap::fromImage(QImage(("../SPA_v1.3/icons/zoom-out.png"))));
    ui->pushButton_25->setIconSize(QSize(20,20));

    ui->pushButton_5->setIcon(QPixmap::fromImage(QImage(("../SPA_v1.3/icons/rotateL.png"))));
    ui->pushButton_5->setIconSize(QSize(40,40));

    ui->pushButton_27->setIcon(QPixmap::fromImage(QImage(("../SPA_v1.3/icons/rotateL.png"))));
    ui->pushButton_27->setIconSize(QSize(40,40));

    ui->pushButton_4->setIcon(QPixmap::fromImage(QImage(("../SPA_v1.3/icons/rotateL.png")).mirrored(true,false)));
    ui->pushButton_4->setIconSize(QSize(40,40));

    ui->pushButton_29->setIcon(QPixmap::fromImage(QImage(("../SPA_v1.3/icons/rotateL.png")).mirrored(true,false)));
    ui->pushButton_29->setIconSize(QSize(40,40));

    ui->pushButton_21->setIcon(QPixmap::fromImage(QImage(("../SPA_v1.3/icons/capacitor.png"))));
    ui->pushButton_21->setIconSize(QSize(20,20));

    ui->pushButton_14->setIcon(QPixmap::fromImage(QImage(("../SPA_v1.3/icons/resistor.png"))));
    ui->pushButton_14->setIconSize(QSize(20,20));

    ui->pushButton_18->setIcon(QPixmap::fromImage(QImage(("../SPA_v1.3/icons/voltagesource.png"))));
    ui->pushButton_18->setIconSize(QSize(20,20));

    ui->pushButton_20->setIcon(QPixmap::fromImage(QImage(("../SPA_v1.3/icons/voltmeter.png"))));
    ui->pushButton_20->setIconSize(QSize(20,20));

    ui->pushButton_16->setIcon(QPixmap::fromImage(QImage(("../SPA_v1.3/icons/not.png"))));
    ui->pushButton_16->setIconSize(QSize(30,30));

    ui->pushButton_17->setIcon(QPixmap::fromImage(QImage(("../SPA_v1.3/icons/and.png"))));
    ui->pushButton_17->setIconSize(QSize(20,20));

    ui->pushButton_23->setIcon(QPixmap::fromImage(QImage(("../SPA_v1.3/icons/xnor.png"))));
    ui->pushButton_23->setIconSize(QSize(30,30));

    ui->pushButton_22->setIcon(QPixmap::fromImage(QImage(("../SPA_v1.3/icons/nand.png"))));
    ui->pushButton_22->setIconSize(QSize(20,20));

    ui->pushButton_7->setIcon(QPixmap::fromImage(QImage(("../SPA_v1.3/icons/ground.png"))));
    ui->pushButton_7->setIconSize(QSize(20,20));

    ui->pushButton_9->setIcon(QPixmap::fromImage(QImage(("../SPA_v1.3/icons/buffer.png"))));
    ui->pushButton_9->setIconSize(QSize(20,20));

    ui->pushButton_6->setIcon(QPixmap::fromImage(QImage(("../SPA_v1.3/icons/diode.png"))));
    ui->pushButton_6->setIconSize(QSize(20,20));

    ui->pushButton_8->setIcon(QPixmap::fromImage(QImage(("../SPA_v1.3/icons/inductor.png"))));
    ui->pushButton_8->setIconSize(QSize(20,30));

    ui->pushButton_11->setIcon(QPixmap::fromImage(QImage(("../SPA_v1.3/icons/transistor.png"))));
    ui->pushButton_11->setIconSize(QSize(20,20));

    ui->pushButton_13->setIcon(QPixmap::fromImage(QImage(("../SPA_v1.3/icons/or.png"))));
    ui->pushButton_13->setIconSize(QSize(20,20));

    ui->pushButton_10->setIcon(QPixmap::fromImage(QImage(("../SPA_v1.3/icons/xor.png"))));
    ui->pushButton_10->setIconSize(QSize(30,30));

    ui->pushButton_12->setIcon(QPixmap::fromImage(QImage(("../SPA_v1.3/icons/nor.png"))));
    ui->pushButton_12->setIconSize(QSize(30,30));

    ui->NormalButton->setIcon(QPixmap::fromImage(QImage(("../SPA_v1.3/icons/normal.png"))));
    ui->NormalButton->setIconSize(QSize(20,20));

    ui->SelectionButton->setIcon(QPixmap::fromImage(QImage(("../SPA_v1.3/icons/rectroi.png"))));
    ui->SelectionButton->setIconSize(QSize(20,20));

    ui->Wire->setIcon(QPixmap::fromImage(QImage(("../SPA_v1.3/icons/line.png"))));
    ui->Wire->setIconSize(QSize(20,20));

    ui->Pen->setIcon(QPixmap::fromImage(QImage(("../SPA_v1.3/icons/pen.png"))));
    ui->Pen->setIconSize(QSize(20,20));

    ui->pushButton_28->setIcon(QPixmap::fromImage(QImage(("../SPA_v1.3/icons/text.png"))));
    ui->pushButton_28->setIconSize(QSize(20,20));

    ui->pushButton_26->setIcon(QPixmap::fromImage(QImage(("../SPA_v1.3/icons/curve.png"))));
    ui->pushButton_26->setIconSize(QSize(20,20));

    ui->pushButton_30->setIcon(QPixmap::fromImage(QImage(("../SPA_v1.3/icons/copy.png"))));
    ui->pushButton_30->setIconSize(QSize(20,20));

    ui->pushButton_31->setIcon(QPixmap::fromImage(QImage(("../SPA_v1.3/icons/paste.png"))));
    ui->pushButton_31->setIconSize(QSize(20,20));

    ui->pushButton_32->setIcon(QPixmap::fromImage(QImage(("../SPA_v1.3/icons/delete_icon.png"))));
    ui->pushButton_32->setIconSize(QSize(20,20));
    ui->lass->setIcon(QPixmap::fromImage(QImage(("../SPA_v1.3/icons/lass.png"))));
    ui->lass->setIconSize(QSize(20,20));
    /*
     * ------------------------------------------------------------------------------------------------------
     * End to add icons for buttons
     *
     */

}

MainWindow::~MainWindow()
{
    delete MyCanva;
    delete func;
    delete button;
    //delete w2;
    delete openAct;
    delete loadAct;
    delete saveAct;
    delete saveAsAct;
    delete rotationCloAct;
    delete rotationCunCloAct;
    delete zoomInAct;
    delete zoomOutAct;
    delete screenshotAct;
    delete filterAct;
    delete gridAct;
    delete saveWithGridActt;
    delete creationAct;
    delete grayfilterAct;
    delete negativefilterAct;
    delete layersAction;
    delete layerActive;
    delete layerMenu;
    delete layerActiveMenu;
    delete toolBar;
    delete paletteBar;
    delete textWindow;
    delete ui;

}

/*
 * -----------------------------------------
 * begin implementation of private slots
 */
void MainWindow::openAction(){
    MyCanva->open();
}

void MainWindow::loadAction(){
    MyCanva->load();
}

void MainWindow::saveAction(){
    MyCanva->save();
}


void MainWindow::saveAsAction(){
    MyCanva->saveAs();
}


void MainWindow::rotationCloAction(){
    MyCanva->rotateClockWise();
}

void MainWindow::rotationCunCloAction(){
    MyCanva->rotateCounterClockWise();
}

void MainWindow::zoomInAction(){
    MyCanva->zoomIn();
    if(MyCanva->getZoomFactor()>=4){
        zoomInAct->setEnabled(false);
    }
    zoomOutAct->setEnabled(true);
    qDebug()<<"Zoom in window;";
}

void MainWindow::zoomOutAction(){
    MyCanva->zoomOut();
    if(MyCanva->getZoomFactor()<=0.25){
        zoomOutAct->setEnabled(false);
    }
    zoomInAct->setEnabled(true);
}

void MainWindow::screenshotAction(){

}

void MainWindow::filterAction(){

}
void MainWindow::gridAction(){
    MyCanva->showGrid();
}

void MainWindow::saveWithGridAction(){
    MyCanva->saveWithGrid();
}

void MainWindow::createLayer(){
    QAction* layer=new QAction(tr("Layer"),this);
    layer->setCheckable(true);
    layer->setChecked(true);
    layerMenu->addAction(layer);
    layersAction->append(layer);
    connect(layer,SIGNAL(triggered()),this,SLOT(showLayer()));
}

void MainWindow::showLayer(){
    QAction *currentAction = static_cast<QAction*>(sender());
    for(int i=0;i<layersAction->size();i++){
        if(layersAction->at(i)==currentAction){
            MyCanva->layerShow(i+1);
            break;
        }
    }
}


void MainWindow::createActlayer(){
    for(int i=0;i<layerActive->size();i++){
        layerActive->at(i)->setChecked(false);
    }
    QAction* layer=new QAction(tr("Active Layer"),this);
    layer->setCheckable(true);
    layer->setChecked(true);
    layerActiveMenu->addAction(layer);
    layerActive->append(layer);
    connect(layer,SIGNAL(triggered()),this,SLOT(activeLayer()));

}


void MainWindow::activeLayer(){
    QAction *currentAction = static_cast<QAction*>(sender());
    for(int i=0;i<layerActive->size();i++){
        layerActive->at(i)->setChecked(false);
        if(layerActive->at(i)==currentAction){
            MyCanva->layerActive(i+1);
        }
    }
    currentAction->setChecked(true);
}

void MainWindow::showMainWindow2()
{
    w2.show();
}

void MainWindow::showFuncWindow(){
    func=new FuncWindow(this);
    connect(func,SIGNAL(load()),this,SLOT(loadPlotFromFile()));
    func->show();
}


void MainWindow::on_pushButton_clicked()
{
    MyCanva->open();
}

void MainWindow::on_pushButton_2_clicked()
{
    MyCanva->save();
}

void MainWindow::on_pushButton_3_clicked()
{
    MyCanva->saveAs();
}

void MainWindow::on_pushButton_4_clicked()
{
    MyCanva->rotateClockWise();
}

void MainWindow::on_pushButton_5_clicked()
{
    MyCanva->rotateCounterClockWise();
}

void MainWindow::on_checkBox_clicked()
{
    this->gridAction();
}

void MainWindow::on_pushButton_24_clicked()
{
    MyCanva->zoomIn();
}

void MainWindow::on_pushButton_25_clicked()
{
    MyCanva->zoomOut();
}



void MainWindow::on_pushButton_14_clicked()
{
    qDebug()<<14;
    MyCanva->createShapeItem(shapeType::Resistance);
    qDebug()<<"clcked";
}

void MainWindow::on_pushButton_21_clicked()
{
    MyCanva->createShapeItem(shapeType::Capacity);
}

void MainWindow::on_pushButton_18_clicked()
{
    MyCanva->createShapeItem(shapeType::CurrentSource);
}



void MainWindow::on_pushButton_20_clicked()
{
    MyCanva->createShapeItem(shapeType::Voltmeter);
}

void MainWindow::on_pushButton_7_clicked()
{
    MyCanva->createShapeItem(shapeType::Ground);
}

void MainWindow::on_pushButton_9_clicked()
{
    MyCanva->createShapeItem(shapeType::Buffer);
}

void MainWindow::on_pushButton_6_clicked()
{
    MyCanva->createShapeItem(shapeType::Diode);
}

void MainWindow::on_pushButton_8_clicked()
{
    MyCanva->createShapeItem(shapeType::Inductor);
}

void MainWindow::on_pushButton_11_clicked()
{
    MyCanva->createShapeItem(shapeType::Transistor);

}

void MainWindow::on_pushButton_19_clicked()
{
    MyCanva->createShapeItem(shapeType::Copperline);

}

void MainWindow::on_pushButton_17_clicked()
{
    MyCanva->createShapeItem(shapeType::AndGate);

}

void MainWindow::on_pushButton_13_clicked()
{
    MyCanva->createShapeItem(shapeType::OrGate);

}

void MainWindow::on_pushButton_16_clicked()
{
    MyCanva->createShapeItem(shapeType::NotGate);

}

void MainWindow::on_pushButton_10_clicked()
{
    MyCanva->createShapeItem(shapeType::XORGate);
}

void MainWindow::on_pushButton_23_clicked()
{
    MyCanva->createShapeItem(shapeType::XNORGate);
}

void MainWindow::on_pushButton_12_clicked()
{
    MyCanva->createShapeItem(shapeType::NorGate);

}

void MainWindow::on_pushButton_22_clicked()
{
    MyCanva->createShapeItem(shapeType::NandGate);

}

void MainWindow::on_pushButton_26_clicked()
{
    showFuncWindow();
}


void MainWindow::grayfilterAction(){ // JWJ
    MyCanva->setGrayFilter();
}

void MainWindow::negativefitlerAction(){//JWJ
    MyCanva->setNegativeFilter();
}

void MainWindow::loadEquation(){

    MyCanva->load(ImageItem(textWindow->getEquation().toImage()));

}

void MainWindow::on_pushButton_28_clicked()
{
    textWindow=new textInput(this);
    connect(textWindow,SIGNAL(addEquation()),this,SLOT(loadEquation()));
    textWindow->show();
}

void MainWindow::on_checkBox_2_clicked()
{
    MyCanva->saveWithGrid();
}

void MainWindow::on_spinBox_valueChanged()
{
    int width=ui->spinBox->text().toInt();
    MyCanva->setPenWidth(width);

}

void MainWindow::on_Color_clicked()
{
    QColor color=QColorDialog::getColor(MyCanva->getColor(),this);
    MyCanva->setPenColor(color);
    qDebug()<<color;
    QPixmap icon=QPixmap(20,20);
    icon.fill(color);
    ui->Color->setIcon(icon);
    ui->Color->setIconSize(QSize(20,20));

}

void MainWindow::trunToEditShape(){
    ui->tabWidget->setCurrentIndex(2);
    ui->label->setText("Item: Shape");
}

void MainWindow::trunToEditImage(){
    ui->tabWidget->setCurrentIndex(2);
    ui->label->setText("Item: Image");
}

void MainWindow::on_ShapeZoomin_clicked()
{
    MyCanva->zoomItem(0.5);
}

void MainWindow::on_ShapeZoomOut_clicked()
{
    MyCanva->zoomItem(2);
}

void MainWindow::loadPlotFromFile(){
    qDebug()<<"test.png begin";
    MyCanva->load("Test.png");
    qDebug()<<"test.png";
}

void MainWindow::on_pushButton_27_clicked()
{
    MyCanva->rotateItem(90);
}

void MainWindow::on_pushButton_29_clicked()
{
   MyCanva->rotateItem(-90);
}

void MainWindow::on_pushButton_30_clicked()
{
    MyCanva->Copy();
}

void MainWindow::on_pushButton_31_clicked()
{
    QImage a=QApplication::clipboard()->image();
    ImageItem b(a);
    qDebug()<<"new Image";
    MyCanva->load(b);
//    MyCanva->Paste();
}

void MainWindow::on_pushButton_32_clicked()
{
    MyCanva->deleteItem();
}

void MainWindow::on_NormalButton_clicked()
{
    MyCanva->setNroaml();
    ui->NormalButton->setChecked(true);
    ui->Pen->setChecked(false);
    ui->SelectionButton->setChecked(false);
    ui->Wire->setChecked(false);
    ui->lass->setChecked(false);
}

void MainWindow::on_SelectionButton_clicked()
{
    MyCanva->activeSlection();
    ui->NormalButton->setChecked(false);
    ui->Pen->setChecked(false);
    ui->SelectionButton->setChecked(true);
    ui->Wire->setChecked(false);
    ui->lass->setChecked(false);
    ui->SelectionButton->setCheckable(false);
}


void MainWindow::on_Pen_clicked()
{
    MyCanva->setPaintOn();
    ui->NormalButton->setChecked(false);
    ui->Pen->setChecked(true);
    ui->SelectionButton->setChecked(false);
    ui->Wire->setChecked(false);
    ui->lass->setChecked(false);
}

void MainWindow::getMewColor(){
    qDebug()<<"get";
    QColor newcolor= paletteBar->getColor();
    MyCanva->setPenColor(newcolor);
    QPixmap icon=QPixmap(20,20);
    icon.fill(newcolor);
    ui->Color->setIcon(icon);
    ui->Color->setIconSize(QSize(20,20));
}


/*
 * -----------------------------------------
 * begin implementation of private slots
 */

void MainWindow::on_Wire_clicked()
{
    MyCanva->setWireOn();
    ui->Wire->setChecked(true);
    ui->NormalButton->setChecked(false);
    ui->Pen->setChecked(false);
    ui->SelectionButton->setChecked(false);
    ui->lass->setChecked(false);
}

void MainWindow::on_lass_clicked()
{
    MyCanva->lassOn();
    ui->lass->setChecked(true);
    ui->Wire->setChecked(false);
    ui->NormalButton->setChecked(false);
    ui->Pen->setChecked(false);
    //ui->SelectionButton->setChecked(false);

}

void MainWindow::on_slod_clicked()
{
    MyCanva->setSolidPencil();

}

void MainWindow::on_dash_clicked()
{
    MyCanva->setDashPecil();
}

void MainWindow::on_dot_clicked()
{
    MyCanva->setDotPencil();
}
